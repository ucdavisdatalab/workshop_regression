[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A Practical Introduction to Regression Modeling in R",
    "section": "",
    "text": "Introduction\nRegression modeling — using input variables to predict or model the value of a response — is widely used in pretty much every field of research. Yet many graduate programs don’t include formal training in statistical modeling, and the DataLab’s office hours indicate widespread anxiety about using regression models in practice. This workshop is intended to help address that anxiety by teaching the fundamentals of using regression modeling in practice. The emphasis is on practice and intuition, with only a small amount of math. This workshop is open to all UC Davis graduate students and postdoctoral scholars. Attendance at both sessions is required. Instruction is in-person and seats are limited. A Zoom link (e.g., broadcast) will be available for those unable to attend who would like to watch live."
  },
  {
    "objectID": "index.html#workshop-structure",
    "href": "index.html#workshop-structure",
    "title": "A Practical Introduction to Regression Modeling in R",
    "section": "Workshop Structure",
    "text": "Workshop Structure\nThis workshop describes itself as a practical introduction. That means you are expected to get practice with regression, so please follow along! The workshop follows the examples in this document, and we will walk through each of them live, taking time to discuss the what and why of regression modeling. Your experience will be far more rewarding if you open up a fresh file in RStudio and follow along!\nThe first day of the workshop series will cover linear and generalized linear regression, including discussions of checking model assumptions and how to handle categorical vs. continuous features. The second day will focus on random effects and mixed effect modeling."
  },
  {
    "objectID": "01_introduction.html#data",
    "href": "01_introduction.html#data",
    "title": "Introduction",
    "section": "Data",
    "text": "Data\nThe data for a regression model are typically in a spreadsheet format, where each row of data is called an observation and each column is called a feature (aka predictor, input, or independent variable). The column that is the outcome of the model is called the response (aka output, target, or dependent variable). Each observation should include a value for every feature (there are some ways of handling missing data but that’s beyond our scope for this workshop)."
  },
  {
    "objectID": "01_introduction.html#preparation",
    "href": "01_introduction.html#preparation",
    "title": "Introduction",
    "section": "Preparation",
    "text": "Preparation\nYour computer will do whatever you tell it to do, even if it’s not a good idea. With this great power comes the responsibility to think, and to check your assumptions.\nThe first one to mention is the assumption that there is a relationship between the features and the response, of the type that the model describes. Your first, best way to test that assumption is to plot the data. Summaries like the means, variances, and correlations can only tell you so much. The following example points out why.\nThe Datasaurus dozen are a collection of thirteen data sets consisting of two features (x and y) that have the same means, variances, and correlations.\n\n\n# A tibble: 13 × 6\n   dataset    correlation x_mean x_variance y_mean y_variance\n   &lt;chr&gt;            &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 away            -0.064   54.3       281.   47.8       726.\n 2 bullseye        -0.069   54.3       281.   47.8       726.\n 3 circle          -0.068   54.3       281.   47.8       725.\n 4 dino            -0.064   54.3       281.   47.8       726.\n 5 dots            -0.06    54.3       281.   47.8       725.\n 6 h_lines         -0.062   54.3       281.   47.8       726.\n 7 high_lines      -0.069   54.3       281.   47.8       726.\n 8 slant_down      -0.069   54.3       281.   47.8       726.\n 9 slant_up        -0.069   54.3       281.   47.8       726.\n10 star            -0.063   54.3       281.   47.8       725.\n11 v_lines         -0.069   54.3       281.   47.8       726.\n12 wide_lines      -0.067   54.3       281.   47.8       726.\n13 x_shape         -0.066   54.3       281.   47.8       725.\n\n\n\n\n\nYou probably wouldn’t use a linear model for most of the panels of that plot because there isn’t a linear relationship between the feature (x-direction) and the response (y-direction). Plotting the data can also reveal problems or oddities in the data that will guide your further investigation."
  },
  {
    "objectID": "02_linear_model.html#palmer-penguins-data",
    "href": "02_linear_model.html#palmer-penguins-data",
    "title": "Linear Regression",
    "section": "Palmer penguins data",
    "text": "Palmer penguins data\nThis first example will use data from the palmerpenguins package. It was created by Allison Horst and contains observations of 344 penguins from the Palmer Station Antarctica LTER site. There are eight features: year, species, sex, island, bill width (mm), bill length (mm), flipper length (mm), and body mass (g). We’ll begin by installing and then importing the palmerpenguins package, and then loading the data.\n\ninstall.packages(\"palmerpenguins\")\nlibrary(palmerpenguins)\ndata(penguins)\n\nThe data is loaded. Let’s look at it. First, we’ll familiarize ourselves with the values.\n\n# check out the palmer penguins data\nsummary(penguins)\n\n      species          island    bill_length_mm  bill_depth_mm  \n Adelie   :152   Biscoe   :168   Min.   :32.10   Min.   :13.10  \n Chinstrap: 68   Dream    :124   1st Qu.:39.23   1st Qu.:15.60  \n Gentoo   :124   Torgersen: 52   Median :44.45   Median :17.30  \n                                 Mean   :43.92   Mean   :17.15  \n                                 3rd Qu.:48.50   3rd Qu.:18.70  \n                                 Max.   :59.60   Max.   :21.50  \n                                 NA's   :2       NA's   :2      \n flipper_length_mm  body_mass_g       sex           year     \n Min.   :172.0     Min.   :2700   female:165   Min.   :2007  \n 1st Qu.:190.0     1st Qu.:3550   male  :168   1st Qu.:2007  \n Median :197.0     Median :4050   NA's  : 11   Median :2008  \n Mean   :200.9     Mean   :4202                Mean   :2008  \n 3rd Qu.:213.0     3rd Qu.:4750                3rd Qu.:2009  \n Max.   :231.0     Max.   :6300                Max.   :2009  \n NA's   :2         NA's   :2                                 \n\nprint(penguins)\n\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nSuppose we think that all penguins grow in a certain proportional way. Then we may be able to estimate the penguin’s mass based on the length of its flipper. Let’s take a look at how that relationship looks in the data.\n\n\n\n\n\nI’ve added a regression line to illustrate the assumed linear relationship. Obviously, you’d want your model of the response to fit perfectly but there’s no line that would go through all the points."
  },
  {
    "objectID": "02_linear_model.html#residuals",
    "href": "02_linear_model.html#residuals",
    "title": "Linear Regression",
    "section": "Residuals",
    "text": "Residuals\nWe have a special term for the difference between the fitted line and the dots. We call the differences residuals, and there is one per dot. The difference is calculated as the vertical distance, as shown here:"
  },
  {
    "objectID": "02_linear_model.html#how-the-line-is-calculated",
    "href": "02_linear_model.html#how-the-line-is-calculated",
    "title": "Linear Regression",
    "section": "How the line is calculated",
    "text": "How the line is calculated\nA line is totally defined by its slope and intercept (intercept is where the line crosses the y-axis). The math of linear regression is just a way to calculate the slope and intercept of that line, and its intuition is also quite simple. It starts with the goal of minimizing the errors. There is an error for each dot, which is the difference between the line and the dot. To minimize the errors, we need to combine all those numbers into one (otherwise, you might have to worry about what effect a change in “A” has on “B”, etc.) A natural way to combine many numbers into one is to add them together. But there is a problem: errors can be negative (when the model fit is greater than the observed data.) If that seems complicated, just understand that both of these lines have residuals that sum to zero:\n\n\n\n\n\nA large negative error may be a good thing for “minimizing” error, but we don’t want that because the error is large. So the errors are squared before adding them together. This is the origin of terms you might have heard, like the sum of squared errors or the mean squared error.\n\nThe lm() function in R\nThe function to estimate a linear regression model in R is called lm(). We’ll get quite familiar with the function during this workshop. Now let’s use it to estimate the regression line in our penguin body size example.\n\npenguin_mass_model = lm(\n  body_mass_g ~ flipper_length_mm,\n  data=penguins)\nsummary(penguin_mass_model)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm, data = penguins)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1058.80  -259.27   -26.88   247.33  1288.69 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       -5780.831    305.815  -18.90   &lt;2e-16 ***\nflipper_length_mm    49.686      1.518   32.72   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 394.3 on 340 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.759, Adjusted R-squared:  0.7583 \nF-statistic:  1071 on 1 and 340 DF,  p-value: &lt; 2.2e-16\n\n\nThere is a bit of unique R code in the call to lm(): it uses R’s formula syntax. A formula in R has the response variable on the left of a tilde (~) and predictors on the right. You may see it in other contexts but its most common use is to specify the variables of a regression formula. Having used the lm() function to estimate the regression model, we then use the summary() function to inspect the model fit. Let’s dig into the summary() output.\nThe important parts of the summary() results are the Coefficients: and below. The first two parts of the summary() result (Call: and Residuals:) are usually not very interesting. At this point, you probably recognize that the Call: is repeating back the function call that created the model, and the Residuals: section tells you about the size of the residuals.\nStarting with Coefficients: we begin to learn about the model fit. You remember that the linear model fits a straight line to the data. And you might also know that you can describe a line by its slope and intercept, as in \\(y = ax + b\\). In that equation, \\(b\\) is the intercept and \\(a\\) is the slope, also known as the coefficient of \\(x\\). The coefficient of flipper_length_mm functions as the slope of our line, and it is listed in the Estimate column. As you might guess, the intercept of the estimated line is listed as under the Estimate column and the (Intercept) row.\nThe Std. Error column is an estimate of uncertainty in the coefficient estimates. The t value column is just the Estimate divided by the Std. Error, and it is used to calculate the Pr(&gt;|t|) column (better known as the coefficient p-value.)\nThe remaining information (Residual standard error, degrees of freedom, Multiple R-squared, Adjusted R-squared, F-statistic, and p-value) is beyond this introductory workshop. Just know that the p-value reported here is almost useless.\nIn contrast, the coefficient p-values, reported as Pr(&gt;|t|) in the Coefficients: table, are often the main focus of analysis. Making use of these p-values and interpreting the asterisks as indicators of statistical significance depends on proper use of the lm() function. In particular, you must decide which variables to use before fitting a model, and you can only try once - otherwise, the p-values will be biased by peeking at the result before doing the test."
  },
  {
    "objectID": "02_linear_model.html#assumptions-of-linear-regression",
    "href": "02_linear_model.html#assumptions-of-linear-regression",
    "title": "Linear Regression",
    "section": "Assumptions of linear regression",
    "text": "Assumptions of linear regression\nThere are a few assumptions about your data that come with linear regression. Before you can accept the results, you must check these:\n\nLinearity: The actual relationship between the features and the response is linear. A trend in the fitted vs. residual plot is evidence that the linearity assumption may be wrong.\nCheck that the residuals have a normal distribution. You can check this via the Q-Q plot, which should have all the dots in an approximately straight line.\nConstant/equal residual variance: The residuals should have the same variability, also called the scale. Confirm this by the location-scale plot.\nThe residuals must be independent of each other. You can’t actually check this from the data, so you have to think carefully about how the value of one residual might depend upon others (for instance if they are measured at locations that touch, maybe there is something that affects both.) Data collection should be planned in order to have independent responses.\n\nLet’s check the assumptions on the penguin body size model:\n\nlayout(matrix(1:4, 2, 2))\nplot(penguin_mass_model)\n\n\n\n\nHere, there is a slight “U” shape in the Residual vs Fitted plot and in the Q-Q plot, which indicates that the relationship between flipper length and body mass is not quite linear. The points fall very close to the dashed diagonal on the Q-Q plot, which indicates that the residuals all seem to be from a nearly identical normal distribution. There is no clear pattern in the scale-location plot, so the residual variances are approximately equal. The deviations from ideal are pretty minor, and you could probably rely on this model to predict the mass of new penguins. But a more correct model is possible by looking at the species separately, as we’ll see in the next chapter."
  },
  {
    "objectID": "02_linear_model.html#multiple-features",
    "href": "02_linear_model.html#multiple-features",
    "title": "Linear Regression",
    "section": "Multiple features",
    "text": "Multiple features\nOur example above has just a single feature to create a model for the response. It is more common to have multiple features, and there really is no limit to how many. However, if the number of features is greater than the number of observations, then we will have problems with the estimation methods.\nWhen there are multiple features, they may be correlated with each other. This is almost always true of observational data (which are features that are measured from the observed units). Typically, the only way to have perfectly uncorrelated data is by designing an experiment where the treatments are uncorrelated.\nCorrelated features will affect each others’ estimates, and the effect increases with the amount of correlation. That happens because when features are correlated, the model has similar fits if one coefficient increases and the other decreases, or vice versa.\nWe can reasonably assume that penguins with longer flippers and heavier bodies also have longer bills. That’s true, as seen in this figure:\n\n\n\n\n\nAs a result, including the bill length as a second feature in the model for body mass leads to a change in the estimated regression coefficient for flipper length and an increase in the uncertainty for that estimate:\n\ncorrelated_model = lm(\n  body_mass_g ~ flipper_length_mm + bill_length_mm,\n  data=penguins)\nsummary(correlated_model)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm + bill_length_mm, \n    data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1090.5  -285.7   -32.1   244.2  1287.5 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       -5736.897    307.959 -18.629   &lt;2e-16 ***\nflipper_length_mm    48.145      2.011  23.939   &lt;2e-16 ***\nbill_length_mm        6.047      5.180   1.168    0.244    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 394.1 on 339 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:   0.76, Adjusted R-squared:  0.7585 \nF-statistic: 536.6 on 2 and 339 DF,  p-value: &lt; 2.2e-16\n\n\nThe estimated coefficient has changed from 49.7 to round(coef(correlated_model)[[2]], 1) and the standard error of the estimated coefficient for flipper_length_mm is 2, which is 32% greater than the previous standard error of 1.5.\n\nWhich features to include?\nA common question is how to decide which features to include in a model. A definitive answer is probably impossible, since the “best” model depends on the goal of the analysis, and model selection frequently ends in marginal and somewhat subjective decisions. In the simplest terms, the correct features for your model are the ones that are relevant to your analysis.\nIf your goal is to study is to understand the effect that some specific features have on the response, then it’s best to decide what those are before trying to estimate the model, and of course you have to keep in mind assumption (1) for linear models: “The actual relationship between the features and the response is linear.” This is a theory-driven approach to model selection, because you begin with an idea of the model you want to fit, and then tell the computer to estimate it.\nThere are data-driven ways of doing model selection, most of which can be summarized as: try a model and then change it to get a better fit. These approaches are dangerous because they tend to over-fit the training data, which usually makes the model less useful for future data. In order to mitigate that risk, a portion of the data has to be held out from the model fitting, to test the model with."
  },
  {
    "objectID": "03_categorical_continuous.html#factors",
    "href": "03_categorical_continuous.html#factors",
    "title": "Categorical features",
    "section": "Factors",
    "text": "Factors\nIn R, categorical variables are called factors. Deep down in the machinery of a regression model, factor effects are handled the same way as continuous features But to fully appreciate this, you have to understand that the factors are coded differently than continuous features. To begin, we should note that linear regression for factor variables is also a kind of scatterplot smoother. Let’s look at an example:\n\nPenguin body mass\nThe plot shows the mass of penguins measured at the Palmer Station LTER site in Antarctica, with the data coming from Allison Horst’s palmerpenguins package.\n\nggplot(penguins) + \n  aes(x=species, y=body_mass_g) +\n  geom_point() +\n  ggtitle(\"Body mass of penguins by species\") +\n  ylab(\"Mass (g)\")\n\nWarning: Removed 2 rows containing missing values (`geom_point()`).\n\n\n\n\n\nLook carefully at the x-axis and you’ll see that the coordinates are species names, not numbers. A line drawn to fit the points would imply that there is a specific order to the species and a specific spacing between them, and that there are some intermediate values where the mass would be somewhere between the known species. But none of those are true.\n\nggplot(penguins) +\n  aes(x=species, y=body_mass_g) +\n  geom_point() +\n  geom_abline(intercept=1800, slope=1200, color=\"blue\") +\n  ggtitle(\"Body mass of penguins by species with linear fit\") +\n  ylab(\"Mass (g)\")\n\nClearly, we need to treat the species as categories, rather than as coordinates along a continuum. Looking at the summary of a regression model gives a clue as to how that works.\n\npenguin_lm = lm(body_mass_g ~ species, data=penguins)\ntidy(penguin_lm) |&gt; kable(digits=2)\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n3700.66\n37.62\n98.37\n0.00\n\n\nspeciesChinstrap\n32.43\n67.51\n0.48\n0.63\n\n\nspeciesGentoo\n1375.35\n56.15\n24.50\n0.00\n\n\n\n\n\nNow let’s see the mean masses of the three species.\n\ncat(\"Mean mass by species:\\n\")\n\nMean mass by species:\n\npenguin_means = with(penguins_small, split(body_mass_g, species)) |&gt;\n  sapply(mean, na.rm=TRUE) |&gt;\n  round(2)\nprint(penguin_means)\n\n   Adelie Chinstrap    Gentoo \n     3580      3660      5150 \n\n\nNotice that the fitted value of the (Intercept) is identical to the average mass of an Adelie penguin, and that there are two rows of species effects, instead of the one row that we saw for the continuous effects so far. The values of the Estimate column in those rows are the estimated effects for Chinstrap and Gentoo penguins - and they are equal to the difference between the average mass of those penguins and Adelie penguins.\n\n\nDesign matrix\nThe reason that the results look like this can be made more clear if you look at the way R converts the categories to numbers. The model.matrix() is the function that R uses internally to prepare data for an lm(), but we can call it ourselves. Remember that linear regression works by multiplying each term by a coefficient, adding adding the results together. Here, we have three terms for the three species. Adelie has been automatically selected as the reference level because it appears first in the data.\n\ntail(model.matrix(penguin_lm))\n\n    (Intercept) speciesChinstrap speciesGentoo\n339           1                1             0\n340           1                1             0\n341           1                1             0\n342           1                1             0\n343           1                1             0\n344           1                1             0\n\n\nHere, we have three terms: (Intercept), speciesChinstrap, and speciesGentoo. So to calculate the mass that is estimated for row 12, we will add 1 * (Intercept) + 1 * speciesGentoo. Since the effect (Intercept) is the average mass of the Adelie penguins, the effect speciesGentoo must be the difference between the mean mass of Gentoo penguins and the mean mass of Adelie penguins. Why no term for speciesAdelie? It’s because the fit would then depend on how mass was apportioned between the penguin species and the intercept. You could increase the intercept by 10 grams and reduce all three species estimates by 10 grams and end up with the same model fit, despite different effects. The computer has no way of deciding between those options, because it just optimizing the model fit.\nYou don’t have to set one factor level to be the reference for estimation, but that goes beyond the scope of this introductory workshop. You may need to change which level is the reference, and that is within our scope. R has a function relevel(), which takes the argument ref=, which specifies the reference level of a factor. Here is how it would work to set Gentoo as the reference level:\n\npenguins$species = relevel(penguins$species, ref=\"Gentoo\")\nreleveled_penguin_model = lm(body_mass_g ~ species, data=penguins)\nsummary(releveled_penguin_model)\n\n\nCall:\nlm(formula = body_mass_g ~ species, data = penguins)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-1126.02  -333.09   -33.09   316.91  1223.98 \n\nCoefficients:\n                 Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       5076.02      41.68  121.78   &lt;2e-16 ***\nspeciesAdelie    -1375.35      56.15  -24.50   &lt;2e-16 ***\nspeciesChinstrap -1342.93      69.86  -19.22   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 462.3 on 339 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.6697,    Adjusted R-squared:  0.6677 \nF-statistic: 343.6 on 2 and 339 DF,  p-value: &lt; 2.2e-16\n\n\nWith Gentoo as the reference level for species, the summary of model results tells us directly that the body mass of Adelie and Chinstrap penguins are both significantly less than that of Gentoo penguins. However we set the factor levels, the model predictions remain unchanged, which helps emphasize that the factor coding affects which interpretation(s) are emphasized in the summary but does not change the model.\n\n# compare predictions between the models with different contrasts:\npred_df = data.frame(species=c(\"Adelie\", \"Chinstrap\", \"Gentoo\"))\npredict(penguin_lm, pred_df)\n\n       1        2        3 \n3700.662 3733.088 5076.016 \n\npredict(releveled_penguin_model, pred_df)\n\n       1        2        3 \n3700.662 3733.088 5076.016"
  },
  {
    "objectID": "03_categorical_continuous.html#combining-continuous-and-categorical",
    "href": "03_categorical_continuous.html#combining-continuous-and-categorical",
    "title": "Categorical features",
    "section": "Combining continuous and categorical",
    "text": "Combining continuous and categorical\nOf course, continuous and categorical features don’t have to be kept separate. We’ll return to our original example and consider whether the relationship between a penguin’s mass and its flipper length is different between the three species. You combine categorical and continuous features by adding them together in the formula.\n\n# create a model with both species and flipper length as features\ncombo_model = lm(body_mass_g ~ flipper_length_mm + species,\n     data=penguins)\n\nHere is a visualization of the model fit:\n\n\n\n\n\nAs you can see, adding a categorical factor to the model has resulted in a vertical offset between the regression lines for each species, and the three regression lines all have the same slope. You should therefore interpret the species effects as species-specific intercepts for the regression line. Now, let’s generate the summary plots and the model summary.\n\n# plot the model diagnostics\n#| warning: false\n#| message: false\nlayout(matrix(1:4, 2, 2))\nplot(combo_model)\n\n\n\n# check out the model summary\nsummary(combo_model)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm + species, data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-927.70 -254.82  -23.92  241.16 1191.68 \n\nCoefficients:\n                   Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       -3764.667    667.844  -5.637 3.65e-08 ***\nflipper_length_mm    40.705      3.071  13.255  &lt; 2e-16 ***\nspeciesAdelie      -266.810     95.264  -2.801  0.00539 ** \nspeciesChinstrap   -473.320     86.746  -5.456 9.41e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 375.5 on 338 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.7826,    Adjusted R-squared:  0.7807 \nF-statistic: 405.7 on 3 and 338 DF,  p-value: &lt; 2.2e-16\n\n\nThe summary tells up how big are the differences between the species-specific intercepts. The diagnostic plots still exhibit a “U” shape in the Fitted Vs. Residual plot, so we haven’t yet found an ideal regression model for this data."
  },
  {
    "objectID": "03_categorical_continuous.html#interactions",
    "href": "03_categorical_continuous.html#interactions",
    "title": "Categorical features",
    "section": "Interactions",
    "text": "Interactions\nWe can improve this model further by adding an interaction between the species and the flipper length. An interaction allows the regression lines to have different slopes for the different species, as seen here:\n\n\n\n\n\nThere will still be different intercepts between species because I have retained the so-called “main effect” of species. An intercept is written in an R formula by placing a colon (:) between two variables.\n\n# create a model interacting species and flipper length as features\ninteraction_model =\n  lm(body_mass_g ~ flipper_length_mm + species + flipper_length_mm:species,\n     data=penguins)\n\nAnd now we can look at the diagnostics.\n\n# plot the model diagnostics\nlayout(matrix(1:4, 2, 2))\nplot(interaction_model)\n\n\n\n# check out the model summary\nsummary(interaction_model)\n\n\nCall:\nlm(formula = body_mass_g ~ flipper_length_mm + species + flipper_length_mm:species, \n    data = penguins)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-911.18 -251.93  -31.77  197.82 1144.81 \n\nCoefficients:\n                                    Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)                        -6787.281   1124.195  -6.037 4.14e-09 ***\nflipper_length_mm                     54.623      5.174  10.557  &lt; 2e-16 ***\nspeciesAdelie                       4251.444   1427.332   2.979  0.00311 ** \nspeciesChinstrap                    3750.085   1676.687   2.237  0.02597 *  \nflipper_length_mm:speciesAdelie      -21.791      6.941  -3.139  0.00184 ** \nflipper_length_mm:speciesChinstrap   -20.049      8.190  -2.448  0.01487 *  \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 370.6 on 336 degrees of freedom\n  (2 observations deleted due to missingness)\nMultiple R-squared:  0.7896,    Adjusted R-squared:  0.7864 \nF-statistic: 252.2 on 5 and 336 DF,  p-value: &lt; 2.2e-16\n\n\nThe “U” shape in the residuals is gone! Also, the significantly negative coefficients for the interactions of flipper length with species Adelie and Chinstrap tells us that body mass for these species increases less quickly with flipper length than for Gentoo penguins. You can see this same relationship in the steeper slope of the red line in the scatter plot with interactions."
  },
  {
    "objectID": "04_generalized_linear_model.html#poisson-regression---effectiveness-of-bug-sprays",
    "href": "04_generalized_linear_model.html#poisson-regression---effectiveness-of-bug-sprays",
    "title": "Generalized Linear Regression",
    "section": "Poisson Regression - Effectiveness of Bug Sprays",
    "text": "Poisson Regression - Effectiveness of Bug Sprays\nWe conclude with an example using count data as a response. The InsectSprays dataset is built in to R so you can import it with the command data(InsectSprays). It has 72 observations of two features. The two features are: the type of insecticide that was applied to a plant, and the other is a count of how many insects were found on the plant. Our goal is to determine whether the different insecticides lead to a consistent difference in the number of insects.\nPlotting the data reveals that there are six insecticides in the study, with twelve observations each:\n\ndata(InsectSprays)\nplot(InsectSprays)\n\n\n\n\nWe can see a few more things from the plot. Counts range from zero to 26, and it appears that the insecticides are in two groups: the counts for sprays 3, 4, and 5 are clustered at low counts (ony one count in this group is greater than six), while the counts for sprays 1, 2, and 6 are all at least seven. That suggests that there is a significant difference between the treatments.\nWe can also see that the counts are more densely clustered for the lesser counts, and more spread out for the greater counts. That’s an unequal variance, so the linear model is probably not appropriate. There is a response type specifically for count data that gets more spread out as the average count grows: Poisson. Let’s fit a Poisson regression to the insecticide data.\n\nmodel_spray = glm(count ~ spray, data=InsectSprays, family='poisson')\nsummary(model_spray)\n\n\nCall:\nglm(formula = count ~ spray, family = \"poisson\", data = InsectSprays)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  2.67415    0.07581  35.274  &lt; 2e-16 ***\nsprayB       0.05588    0.10574   0.528    0.597    \nsprayC      -1.94018    0.21389  -9.071  &lt; 2e-16 ***\nsprayD      -1.08152    0.15065  -7.179 7.03e-13 ***\nsprayE      -1.42139    0.17192  -8.268  &lt; 2e-16 ***\nsprayF       0.13926    0.10367   1.343    0.179    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for poisson family taken to be 1)\n\n    Null deviance: 409.041  on 71  degrees of freedom\nResidual deviance:  98.329  on 66  degrees of freedom\nAIC: 376.59\n\nNumber of Fisher Scoring iterations: 5\n\n# make diagnostic plots:\ndeviance_residuals = residuals(model_spray, type=\"deviance\")\nlayout(matrix(1:2, 1, 2))\nqqnorm(deviance_residuals)\nabline(a=0, b=1, lty=3)\nplot(fitted(model_spray), deviance_residuals)\n\n\n\n\nThe diagnostics for this model look pretty good. The Q-Q plot may indicate slightly heavy tails, which would be a sign that the response is overdispersed for the Poisson distribution. A further check is to calculate the mean and variance for each group in the data (this is ony pratical because the model is simple and the number of levels is small). If the data has a Poisson distribution, we expect that the mean and the variance are approximately equal. Of course, real data never perfectly matches this expected relationship.\n\n# check the men-variance relationship\ngroup_by(InsectSprays, spray) |&gt;\n  summarize(mean = mean(count),\n            var = var(count))\n\n# A tibble: 6 × 3\n  spray  mean   var\n  &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 A     14.5  22.3 \n2 B     15.3  18.2 \n3 C      2.08  3.90\n4 D      4.92  6.27\n5 E      3.5   3   \n6 F     16.7  38.6 \n\n\nIn most cases, the variance is slightly greater than the mean. Only group F has variance more than twice the mean, which is a reasonable threshold for where to begin to worry.\n\nNegative-binomial regression\nI’d probably leave the InsectSprays model as it is for simplicity, but it would also be reasonable to change the model to account for overdispersion. There are a lot of ways to do that, and one classic method is to model the response as a negative-binomial distribution. That requires loading the MASS package, which provies the glm.nb() function. Here’s the result:\n\n# import the MASS package\nlibrary(MASS)\n\n\nAttaching package: 'MASS'\n\n\nThe following object is masked from 'package:dplyr':\n\n    select\n\n#estimate the NB model\nmodel_spray_nb = glm.nb(count ~ spray, data=InsectSprays)\nsummary(model_spray_nb)\n\n\nCall:\nglm.nb(formula = count ~ spray, data = InsectSprays, init.theta = 28.09950714, \n    link = log)\n\nCoefficients:\n            Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)  2.67415    0.09334  28.649  &lt; 2e-16 ***\nsprayB       0.05588    0.13082   0.427    0.669    \nsprayC      -1.94018    0.22733  -8.535  &lt; 2e-16 ***\nsprayD      -1.08152    0.16920  -6.392 1.64e-10 ***\nsprayE      -1.42139    0.18838  -7.545 4.52e-14 ***\nsprayF       0.13926    0.12914   1.078    0.281    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for Negative Binomial(28.0995) family taken to be 1)\n\n    Null deviance: 313.444  on 71  degrees of freedom\nResidual deviance:  74.145  on 66  degrees of freedom\nAIC: 374.22\n\nNumber of Fisher Scoring iterations: 1\n\n              Theta:  28.1 \n          Std. Err.:  17.7 \n\n 2 x log-likelihood:  -360.218 \n\n# make diagnostic plots:\ndeviance_residuals_nb = residuals(model_spray_nb, type=\"deviance\")\nlayout(matrix(1:2, 1, 2))\nqqnorm(deviance_residuals_nb)\nabline(a=0, b=1, lty=3)\nplot(fitted(model_spray_nb), deviance_residuals_nb)\n\n\n\n# compare the models on the basis of AIC\nAIC(model_spray, model_spray_nb)\n\n               df      AIC\nmodel_spray     6 376.5892\nmodel_spray_nb  7 374.2179\n\n\nThe negative-binomial model has a smaller AIC and the Q-Q lies more along the line. We should conclude that the negative-binomial model appears to be a slightly better fit for the data."
  }
]